{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "055756bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up imports and libraries\n",
    "# datasets at: https://www.yelp.com/dataset\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from sklearn.feature_extraction.text import  TfidfTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "import seaborn as sns\n",
    "import string\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "#nltk.download('punkt')\n",
    "#nltk.download('vader_lexicon')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "123ef363",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import business dataset\n",
    "import pandas as pd\n",
    "yelp_busn = []\n",
    "r_dtypes = {\"stars\": np.float16, \n",
    "            \"latitude\": np.int32, \n",
    "            \"longitude\": np.int32,\n",
    "           }\n",
    "with open(\"yelpify/yelp_academic_dataset_business.json\", \"r\", encoding='utf8') as f:\n",
    "    reader = pd.read_json(f, orient=\"records\", lines=True, \n",
    "                          dtype=r_dtypes, chunksize=1000)\n",
    "        \n",
    "    for chunk in reader:\n",
    "        reduced_chunk = chunk.drop(columns=['is_open', 'longitude','latitude','hours'])\\\n",
    "                             .query(\"`state` == 'FL'\")\n",
    "        yelp_busn.append(reduced_chunk) \n",
    "    \n",
    "yelp_busn = pd.concat(yelp_busn, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "06802218",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>name</th>\n",
       "      <th>address</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_count</th>\n",
       "      <th>attributes</th>\n",
       "      <th>categories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>eEOYSgkmpB90uNA7lDOMRA</td>\n",
       "      <td>Vietnamese Food Truck</td>\n",
       "      <td></td>\n",
       "      <td>Tampa Bay</td>\n",
       "      <td>FL</td>\n",
       "      <td>33602</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10</td>\n",
       "      <td>{'Alcohol': ''none'', 'OutdoorSeating': 'None'...</td>\n",
       "      <td>Vietnamese, Food, Restaurants, Food Trucks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0bPLkL0QhhPO5kt1_EXmNQ</td>\n",
       "      <td>Zio's Italian Market</td>\n",
       "      <td>2575 E Bay Dr</td>\n",
       "      <td>Largo</td>\n",
       "      <td>FL</td>\n",
       "      <td>33771</td>\n",
       "      <td>4.5</td>\n",
       "      <td>100</td>\n",
       "      <td>{'OutdoorSeating': 'False', 'RestaurantsGoodFo...</td>\n",
       "      <td>Food, Delis, Italian, Bakeries, Restaurants</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>uI9XODGY_2_ieTE6xJ0myw</td>\n",
       "      <td>Roman Forum</td>\n",
       "      <td>10440 N Dale Mabry Hwy</td>\n",
       "      <td>Tampa</td>\n",
       "      <td>FL</td>\n",
       "      <td>33618</td>\n",
       "      <td>4.0</td>\n",
       "      <td>23</td>\n",
       "      <td>{'BusinessParking': '{'garage': False, 'street...</td>\n",
       "      <td>Restaurants, American (New), Italian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>JgpnXv_0XhV3SfbfB50nxw</td>\n",
       "      <td>Joe's Pizza</td>\n",
       "      <td>2038 N Dale Mabry Hwy</td>\n",
       "      <td>Tampa</td>\n",
       "      <td>FL</td>\n",
       "      <td>33607</td>\n",
       "      <td>4.0</td>\n",
       "      <td>35</td>\n",
       "      <td>{'BusinessParking': '{'garage': False, 'street...</td>\n",
       "      <td>Restaurants, Pizza</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>pJfh3Ct8iL58NZa8ta-a5w</td>\n",
       "      <td>Top Shelf Sports Lounge</td>\n",
       "      <td>3173 Cypress Ridge Blvd</td>\n",
       "      <td>Wesley Chapel</td>\n",
       "      <td>FL</td>\n",
       "      <td>33544</td>\n",
       "      <td>4.5</td>\n",
       "      <td>95</td>\n",
       "      <td>{'BestNights': '{'monday': False, 'tuesday': F...</td>\n",
       "      <td>Burgers, Sports Bars, Bars, Lounges, Restauran...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26315</th>\n",
       "      <td>Scd-rcsQCn60t1sHHFv-og</td>\n",
       "      <td>First Watch</td>\n",
       "      <td>4045 N Tyrone Blvd, Ste 204</td>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>FL</td>\n",
       "      <td>33709</td>\n",
       "      <td>3.5</td>\n",
       "      <td>183</td>\n",
       "      <td>{'RestaurantsPriceRange2': '2', 'OutdoorSeatin...</td>\n",
       "      <td>Cafes, Restaurants, Breakfast &amp; Brunch, Americ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26320</th>\n",
       "      <td>8MzF1Tlgz0pOkxmhP5dYzA</td>\n",
       "      <td>El Cap Restaurant</td>\n",
       "      <td>3500 4th St N</td>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>FL</td>\n",
       "      <td>33704</td>\n",
       "      <td>3.5</td>\n",
       "      <td>414</td>\n",
       "      <td>{'GoodForKids': 'True', 'BikeParking': 'True',...</td>\n",
       "      <td>American (Traditional), Burgers, Restaurants</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26322</th>\n",
       "      <td>-bZQH8yjm7ntTyGeLQwh8Q</td>\n",
       "      <td>Farmer's Kitchen Restaurant</td>\n",
       "      <td>3500 E Bay Dr</td>\n",
       "      <td>Largo</td>\n",
       "      <td>FL</td>\n",
       "      <td>33771</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6</td>\n",
       "      <td>{'RestaurantsReservations': 'True', 'Restauran...</td>\n",
       "      <td>Sandwiches, Restaurants, Diners</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26323</th>\n",
       "      <td>BIyT7Kr7tMJqlfp4oOOYQg</td>\n",
       "      <td>Copper Bell Cafe</td>\n",
       "      <td>11228 Boyette Rd</td>\n",
       "      <td>Riverview</td>\n",
       "      <td>FL</td>\n",
       "      <td>33569</td>\n",
       "      <td>3.5</td>\n",
       "      <td>49</td>\n",
       "      <td>{'BikeParking': 'True', 'RestaurantsReservatio...</td>\n",
       "      <td>Breakfast &amp; Brunch, Cafes, Restaurants</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26327</th>\n",
       "      <td>esBGrrmuZzSiECyRBoKvvA</td>\n",
       "      <td>Colony Grill - St. Petersburg</td>\n",
       "      <td>670 Central Ave</td>\n",
       "      <td>St. Petersburg</td>\n",
       "      <td>FL</td>\n",
       "      <td>33701</td>\n",
       "      <td>4.5</td>\n",
       "      <td>38</td>\n",
       "      <td>{'RestaurantsPriceRange2': '2', 'RestaurantsAt...</td>\n",
       "      <td>Bars, Beer Bar, Nightlife, Wine Bars, Pizza, R...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8732 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  business_id                           name  \\\n",
       "2      eEOYSgkmpB90uNA7lDOMRA          Vietnamese Food Truck   \n",
       "4      0bPLkL0QhhPO5kt1_EXmNQ           Zio's Italian Market   \n",
       "7      uI9XODGY_2_ieTE6xJ0myw                    Roman Forum   \n",
       "8      JgpnXv_0XhV3SfbfB50nxw                    Joe's Pizza   \n",
       "12     pJfh3Ct8iL58NZa8ta-a5w        Top Shelf Sports Lounge   \n",
       "...                       ...                            ...   \n",
       "26315  Scd-rcsQCn60t1sHHFv-og                    First Watch   \n",
       "26320  8MzF1Tlgz0pOkxmhP5dYzA              El Cap Restaurant   \n",
       "26322  -bZQH8yjm7ntTyGeLQwh8Q    Farmer's Kitchen Restaurant   \n",
       "26323  BIyT7Kr7tMJqlfp4oOOYQg               Copper Bell Cafe   \n",
       "26327  esBGrrmuZzSiECyRBoKvvA  Colony Grill - St. Petersburg   \n",
       "\n",
       "                           address            city state postal_code  stars  \\\n",
       "2                                        Tampa Bay    FL       33602    4.0   \n",
       "4                    2575 E Bay Dr           Largo    FL       33771    4.5   \n",
       "7           10440 N Dale Mabry Hwy           Tampa    FL       33618    4.0   \n",
       "8            2038 N Dale Mabry Hwy           Tampa    FL       33607    4.0   \n",
       "12         3173 Cypress Ridge Blvd   Wesley Chapel    FL       33544    4.5   \n",
       "...                            ...             ...   ...         ...    ...   \n",
       "26315  4045 N Tyrone Blvd, Ste 204  St. Petersburg    FL       33709    3.5   \n",
       "26320                3500 4th St N  St. Petersburg    FL       33704    3.5   \n",
       "26322                3500 E Bay Dr           Largo    FL       33771    4.0   \n",
       "26323             11228 Boyette Rd       Riverview    FL       33569    3.5   \n",
       "26327              670 Central Ave  St. Petersburg    FL       33701    4.5   \n",
       "\n",
       "       review_count                                         attributes  \\\n",
       "2                10  {'Alcohol': ''none'', 'OutdoorSeating': 'None'...   \n",
       "4               100  {'OutdoorSeating': 'False', 'RestaurantsGoodFo...   \n",
       "7                23  {'BusinessParking': '{'garage': False, 'street...   \n",
       "8                35  {'BusinessParking': '{'garage': False, 'street...   \n",
       "12               95  {'BestNights': '{'monday': False, 'tuesday': F...   \n",
       "...             ...                                                ...   \n",
       "26315           183  {'RestaurantsPriceRange2': '2', 'OutdoorSeatin...   \n",
       "26320           414  {'GoodForKids': 'True', 'BikeParking': 'True',...   \n",
       "26322             6  {'RestaurantsReservations': 'True', 'Restauran...   \n",
       "26323            49  {'BikeParking': 'True', 'RestaurantsReservatio...   \n",
       "26327            38  {'RestaurantsPriceRange2': '2', 'RestaurantsAt...   \n",
       "\n",
       "                                              categories  \n",
       "2             Vietnamese, Food, Restaurants, Food Trucks  \n",
       "4            Food, Delis, Italian, Bakeries, Restaurants  \n",
       "7                   Restaurants, American (New), Italian  \n",
       "8                                     Restaurants, Pizza  \n",
       "12     Burgers, Sports Bars, Bars, Lounges, Restauran...  \n",
       "...                                                  ...  \n",
       "26315  Cafes, Restaurants, Breakfast & Brunch, Americ...  \n",
       "26320       American (Traditional), Burgers, Restaurants  \n",
       "26322                    Sandwiches, Restaurants, Diners  \n",
       "26323             Breakfast & Brunch, Cafes, Restaurants  \n",
       "26327  Bars, Beer Bar, Nightlife, Wine Bars, Pizza, R...  \n",
       "\n",
       "[8732 rows x 10 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# limit review set to restaurants in FL for the time period\n",
    "yelp_busn = yelp_busn[yelp_busn['categories'].str.contains('Restaurant')==True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "33dba976",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the review data set\n",
    "yelp_reviews = []\n",
    "r_dtypes = {\"stars\": np.float16, \n",
    "            \"useful\": np.int32, \n",
    "            \"funny\": np.int32,\n",
    "            \"cool\": np.int32,\n",
    "           }\n",
    "with open(\"yelpify/yelp_academic_dataset_review.json\", \"r\", encoding='utf8') as f:\n",
    "    reader = pd.read_json(f, orient=\"records\", lines=True, \n",
    "                          dtype=r_dtypes, chunksize=1000)\n",
    "        \n",
    "    for chunk in reader:\n",
    "        reduced_chunk = chunk.drop(columns=['review_id', 'user_id','useful','funny','cool'])\\\n",
    "                             .query('date >= \"2022-01-01\"')\n",
    "        yelp_reviews.append(reduced_chunk)\n",
    "        \n",
    "yelp_reviews = pd.concat(yelp_reviews, ignore_index=True)\n",
    "#yelp_reviews.describe #80k rows for 12/1/21; 31665  for 2022-01-01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9590ba4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jo4ei-c-5H53IxZxAVf1jQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Danielle did a great job!  She listened and cu...</td>\n",
       "      <td>2022-01-03 03:17:03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9MHe5jAym2d8VhT_NbCRyw</td>\n",
       "      <td>2.0</td>\n",
       "      <td>We  Ordered pork fried rice and beef chow mei ...</td>\n",
       "      <td>2022-01-06 03:59:21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6U0ZweWWWQUzea2rF4zKgQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Food was good love the Cuban sandwiche \\nThe p...</td>\n",
       "      <td>2022-01-10 19:54:45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>yYpU8EWucx32OYIIHqP63A</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Have called this location multiple times throu...</td>\n",
       "      <td>2022-01-11 21:07:05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LIoU5gBv75l1lMFaQ3wyfQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Excellent, stopped in for a late lunch and was...</td>\n",
       "      <td>2022-01-03 20:37:31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26315</th>\n",
       "      <td>EhotxJEJxpMgCJ0F82Buvg</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Pretty disappointed in this place. Nice decor ...</td>\n",
       "      <td>2022-01-01 06:46:38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26320</th>\n",
       "      <td>TaYJfvjk0kLMnS-gQd28bw</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Ok place with a nice crowd but servers are poo...</td>\n",
       "      <td>2022-01-06 23:38:54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26322</th>\n",
       "      <td>81dk-1nYjlJDEIG3DRZIwg</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Better if they had food. Decent but not world ...</td>\n",
       "      <td>2022-01-08 20:11:06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26323</th>\n",
       "      <td>6Cs52T0ItZ5TQ5Qx-UGaMw</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Great food.  Great service.   Two things that ...</td>\n",
       "      <td>2022-01-08 23:08:17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26327</th>\n",
       "      <td>3J3-6jb4-Kq9Oi99H-f2-Q</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Ordered takeout in New Year's Day. Steak was o...</td>\n",
       "      <td>2022-01-02 00:35:21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8732 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  business_id  stars  \\\n",
       "2      Jo4ei-c-5H53IxZxAVf1jQ    5.0   \n",
       "4      9MHe5jAym2d8VhT_NbCRyw    2.0   \n",
       "7      6U0ZweWWWQUzea2rF4zKgQ    5.0   \n",
       "8      yYpU8EWucx32OYIIHqP63A    1.0   \n",
       "12     LIoU5gBv75l1lMFaQ3wyfQ    5.0   \n",
       "...                       ...    ...   \n",
       "26315  EhotxJEJxpMgCJ0F82Buvg    2.0   \n",
       "26320  TaYJfvjk0kLMnS-gQd28bw    2.0   \n",
       "26322  81dk-1nYjlJDEIG3DRZIwg    4.0   \n",
       "26323  6Cs52T0ItZ5TQ5Qx-UGaMw    5.0   \n",
       "26327  3J3-6jb4-Kq9Oi99H-f2-Q    1.0   \n",
       "\n",
       "                                                    text                date  \n",
       "2      Danielle did a great job!  She listened and cu... 2022-01-03 03:17:03  \n",
       "4      We  Ordered pork fried rice and beef chow mei ... 2022-01-06 03:59:21  \n",
       "7      Food was good love the Cuban sandwiche \\nThe p... 2022-01-10 19:54:45  \n",
       "8      Have called this location multiple times throu... 2022-01-11 21:07:05  \n",
       "12     Excellent, stopped in for a late lunch and was... 2022-01-03 20:37:31  \n",
       "...                                                  ...                 ...  \n",
       "26315  Pretty disappointed in this place. Nice decor ... 2022-01-01 06:46:38  \n",
       "26320  Ok place with a nice crowd but servers are poo... 2022-01-06 23:38:54  \n",
       "26322  Better if they had food. Decent but not world ... 2022-01-08 20:11:06  \n",
       "26323  Great food.  Great service.   Two things that ... 2022-01-08 23:08:17  \n",
       "26327  Ordered takeout in New Year's Day. Steak was o... 2022-01-02 00:35:21  \n",
       "\n",
       "[8732 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keys = list(yelp_busn['business_id'].values) #business filtered to FL and restaurant\n",
    "keys\n",
    "yelp_busn.set_index('business_id') #dupes?\n",
    "yelp_reviews.set_index('business_id')\n",
    "i1 = yelp_reviews.index\n",
    "i2 = yelp_busn.index\n",
    "yelp_reviews_FL = yelp_reviews[i1.isin(i2)]\n",
    "yelp_reviews_FL\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "887538a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mcdc9\\AppData\\Local\\Temp/ipykernel_6260/3368109950.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  yelp_reviews_FL['text length'] = yelp_reviews_FL['text'].apply(len)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>date</th>\n",
       "      <th>text length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jo4ei-c-5H53IxZxAVf1jQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Danielle did a great job!  She listened and cu...</td>\n",
       "      <td>2022-01-03 03:17:03</td>\n",
       "      <td>278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9MHe5jAym2d8VhT_NbCRyw</td>\n",
       "      <td>2.0</td>\n",
       "      <td>We  Ordered pork fried rice and beef chow mei ...</td>\n",
       "      <td>2022-01-06 03:59:21</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6U0ZweWWWQUzea2rF4zKgQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Food was good love the Cuban sandwiche \\nThe p...</td>\n",
       "      <td>2022-01-10 19:54:45</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>yYpU8EWucx32OYIIHqP63A</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Have called this location multiple times throu...</td>\n",
       "      <td>2022-01-11 21:07:05</td>\n",
       "      <td>874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LIoU5gBv75l1lMFaQ3wyfQ</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Excellent, stopped in for a late lunch and was...</td>\n",
       "      <td>2022-01-03 20:37:31</td>\n",
       "      <td>317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26315</th>\n",
       "      <td>EhotxJEJxpMgCJ0F82Buvg</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Pretty disappointed in this place. Nice decor ...</td>\n",
       "      <td>2022-01-01 06:46:38</td>\n",
       "      <td>318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26320</th>\n",
       "      <td>TaYJfvjk0kLMnS-gQd28bw</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Ok place with a nice crowd but servers are poo...</td>\n",
       "      <td>2022-01-06 23:38:54</td>\n",
       "      <td>173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26322</th>\n",
       "      <td>81dk-1nYjlJDEIG3DRZIwg</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Better if they had food. Decent but not world ...</td>\n",
       "      <td>2022-01-08 20:11:06</td>\n",
       "      <td>153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26323</th>\n",
       "      <td>6Cs52T0ItZ5TQ5Qx-UGaMw</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Great food.  Great service.   Two things that ...</td>\n",
       "      <td>2022-01-08 23:08:17</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26327</th>\n",
       "      <td>3J3-6jb4-Kq9Oi99H-f2-Q</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Ordered takeout in New Year's Day. Steak was o...</td>\n",
       "      <td>2022-01-02 00:35:21</td>\n",
       "      <td>515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8732 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  business_id  stars  \\\n",
       "2      Jo4ei-c-5H53IxZxAVf1jQ    5.0   \n",
       "4      9MHe5jAym2d8VhT_NbCRyw    2.0   \n",
       "7      6U0ZweWWWQUzea2rF4zKgQ    5.0   \n",
       "8      yYpU8EWucx32OYIIHqP63A    1.0   \n",
       "12     LIoU5gBv75l1lMFaQ3wyfQ    5.0   \n",
       "...                       ...    ...   \n",
       "26315  EhotxJEJxpMgCJ0F82Buvg    2.0   \n",
       "26320  TaYJfvjk0kLMnS-gQd28bw    2.0   \n",
       "26322  81dk-1nYjlJDEIG3DRZIwg    4.0   \n",
       "26323  6Cs52T0ItZ5TQ5Qx-UGaMw    5.0   \n",
       "26327  3J3-6jb4-Kq9Oi99H-f2-Q    1.0   \n",
       "\n",
       "                                                    text                date  \\\n",
       "2      Danielle did a great job!  She listened and cu... 2022-01-03 03:17:03   \n",
       "4      We  Ordered pork fried rice and beef chow mei ... 2022-01-06 03:59:21   \n",
       "7      Food was good love the Cuban sandwiche \\nThe p... 2022-01-10 19:54:45   \n",
       "8      Have called this location multiple times throu... 2022-01-11 21:07:05   \n",
       "12     Excellent, stopped in for a late lunch and was... 2022-01-03 20:37:31   \n",
       "...                                                  ...                 ...   \n",
       "26315  Pretty disappointed in this place. Nice decor ... 2022-01-01 06:46:38   \n",
       "26320  Ok place with a nice crowd but servers are poo... 2022-01-06 23:38:54   \n",
       "26322  Better if they had food. Decent but not world ... 2022-01-08 20:11:06   \n",
       "26323  Great food.  Great service.   Two things that ... 2022-01-08 23:08:17   \n",
       "26327  Ordered takeout in New Year's Day. Steak was o... 2022-01-02 00:35:21   \n",
       "\n",
       "       text length  \n",
       "2              278  \n",
       "4              148  \n",
       "7              116  \n",
       "8              874  \n",
       "12             317  \n",
       "...            ...  \n",
       "26315          318  \n",
       "26320          173  \n",
       "26322          153  \n",
       "26323          149  \n",
       "26327          515  \n",
       "\n",
       "[8732 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# append text length of review\n",
    "yelp_reviews_FL.describe\n",
    "yelp_reviews_FL['text length'] = yelp_reviews_FL['text'].apply(len)\n",
    "yelp_reviews_FL.head()\n",
    "yelp_reviews_FL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "17cdc0d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x201ab1bb2e0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(data=yelp_reviews_FL, col='stars')\n",
    "g.map(plt.hist, 'text length', bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3843cf02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Pre Processing\n",
    "# 1. Remove Stop Words\n",
    "# 2. Stem\n",
    "# 3. Tokenize\n",
    "\n",
    "# create a dataset without 3 stars since those are neutral\n",
    "yelp_data = yelp_reviews_FL[(yelp_reviews_FL['stars'] > 3) | (yelp_reviews_FL['stars'] < 3)]\n",
    "\n",
    "X = pd.DataFrame(yelp_data['text'])\n",
    "y = pd.DataFrame(yelp_data['stars'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8e0e0d55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[Danielle, great, job, listened, cut, hair, wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[Ordered, pork, fried, rice, beef, chow, mei, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>[Food, good, love, Cuban, sandwiche, place, cl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>[called, location, multiple, times, throughout...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>[Excellent, stopped, late, lunch, happy, food,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26315</th>\n",
       "      <td>[Pretty, disappointed, place, Nice, decor, amb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26320</th>\n",
       "      <td>[Ok, place, nice, crowd, servers, poor, commun...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26322</th>\n",
       "      <td>[Better, food, Decent, world, shaking, beer, o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26323</th>\n",
       "      <td>[Great, food, Great, service, Two, things, mak...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26327</th>\n",
       "      <td>[Ordered, takeout, New, Years, Day, Steak, ord...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8121 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text\n",
       "2      [Danielle, great, job, listened, cut, hair, wa...\n",
       "4      [Ordered, pork, fried, rice, beef, chow, mei, ...\n",
       "7      [Food, good, love, Cuban, sandwiche, place, cl...\n",
       "8      [called, location, multiple, times, throughout...\n",
       "12     [Excellent, stopped, late, lunch, happy, food,...\n",
       "...                                                  ...\n",
       "26315  [Pretty, disappointed, place, Nice, decor, amb...\n",
       "26320  [Ok, place, nice, crowd, servers, poor, commun...\n",
       "26322  [Better, food, Decent, world, shaking, beer, o...\n",
       "26323  [Great, food, Great, service, Two, things, mak...\n",
       "26327  [Ordered, takeout, New, Years, Day, Steak, ord...\n",
       "\n",
       "[8121 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1 Remove stop words\n",
    "def process_text(text):\n",
    "    nopunc = [char for char in text if char not in string.punctuation]\n",
    "    nopunc = ''.join(nopunc)\n",
    "    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]\n",
    "\n",
    "X['text'] = X['text'].apply(process_text)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f273f797",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stemmed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[daniell, great, job, listen, cut, hair, way, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[order, pork, fri, rice, beef, chow, mei, fun,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>[food, good, love, cuban, sandwich, place, cle...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>[call, locat, multipl, time, throughout, day, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>[excel, stop, late, lunch, happi, food, servic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26315</th>\n",
       "      <td>[pretti, disappoint, place, nice, decor, ambia...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26320</th>\n",
       "      <td>[ok, place, nice, crowd, server, poor, communi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26322</th>\n",
       "      <td>[better, food, decent, world, shake, beer, opt...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26323</th>\n",
       "      <td>[great, food, great, servic, two, thing, make,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26327</th>\n",
       "      <td>[order, takeout, new, year, day, steak, order,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8121 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 stemmed\n",
       "2      [daniell, great, job, listen, cut, hair, way, ...\n",
       "4      [order, pork, fri, rice, beef, chow, mei, fun,...\n",
       "7      [food, good, love, cuban, sandwich, place, cle...\n",
       "8      [call, locat, multipl, time, throughout, day, ...\n",
       "12     [excel, stop, late, lunch, happi, food, servic...\n",
       "...                                                  ...\n",
       "26315  [pretti, disappoint, place, nice, decor, ambia...\n",
       "26320  [ok, place, nice, crowd, server, poor, communi...\n",
       "26322  [better, food, decent, world, shake, beer, opt...\n",
       "26323  [great, food, great, servic, two, thing, make,...\n",
       "26327  [order, takeout, new, year, day, steak, order,...\n",
       "\n",
       "[8121 rows x 1 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2 Stem\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "snowBallStemmer = SnowballStemmer(\"english\")\n",
    "X['stemmed'] = X['text'].apply(lambda x: [snowBallStemmer.stem(y) for y in x])\n",
    "X = X.drop(columns=['text'])\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "afe1c2ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. Tokenize data to turn words into integers for modeling\n",
    "cv = CountVectorizer() \n",
    "X['stemmed']=[\" \".join(review) for review in X['stemmed'].values]\n",
    "X_cv = cv.fit_transform(X['stemmed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6a45a6a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 10 artists>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# frequency (bigram would be nice to have) \n",
    "chart_df = pd.DataFrame(X_cv.toarray(), columns=cv.get_feature_names_out())\n",
    "chart_freq = pd.DataFrame(chart_df.sum(axis=0)).reset_index()\n",
    "chart_freq.columns = ['word', 'frequency']\n",
    "chart_freq = chart_freq.sort_values(by='frequency', ascending=False).head(10)\n",
    "plt.bar(chart_freq['word'],chart_freq['frequency'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4b5cda60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='stars'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# pie chart of stars for FL restaurants\n",
    "plt.figure(figsize=(8,8))\n",
    "y['stars'].value_counts().plot.pie(autopct='%1.1f%%', startangle=60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bf34f7bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mcdc9\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#frequency of star ratings\n",
    "x=y['stars'].value_counts()\n",
    "x=x.sort_index()\n",
    "plt.figure(figsize=(10,6))\n",
    "ax= sns.barplot(x.index, x.values, alpha=0.8)\n",
    "plt.title(\"Star Rating Distribution\")\n",
    "plt.ylabel('Count of Ratings')\n",
    "plt.xlabel('Stars')\n",
    "rects = ax.patches\n",
    "labels = x.values\n",
    "for rect, label in zip(rects, labels):\n",
    "    height = rect.get_height()\n",
    "    ax.text(rect.get_x() + rect.get_width() / 2, height+0.01, label,\n",
    "            ha='center', va='bottom')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "21bd468e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Sparse Matrix:  (8121, 17128)\n",
      "Amount of Non-Zero occurrences:  319237\n",
      "Density: 0.22950759188111206\n"
     ]
    }
   ],
   "source": [
    "X_cv\n",
    "print('Shape of Sparse Matrix: ', X_cv.shape)\n",
    "print('Amount of Non-Zero Occurrences: ', X_cv.nnz)\n",
    "# % non-zero values\n",
    "density = (100.0 * X_cv.nnz / (X_cv.shape[0] * X_cv.shape[1]))\n",
    "print(\"Density: {}\".format((density)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "579edd87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 438   18   34   43]\n",
      " [  80    3   35   45]\n",
      " [  22    1   79  263]\n",
      " [  85    2   60 1229]]\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         1.0       0.70      0.82      0.76       533\n",
      "         2.0       0.12      0.02      0.03       163\n",
      "         4.0       0.38      0.22      0.28       365\n",
      "         5.0       0.78      0.89      0.83      1376\n",
      "\n",
      "    accuracy                           0.72      2437\n",
      "   macro avg       0.50      0.49      0.47      2437\n",
      "weighted avg       0.66      0.72      0.68      2437\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mcdc9\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "# set up nb model and run predictions\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_cv, y,test_size=0.3,random_state=101)\n",
    "nb = MultinomialNB()\n",
    "nb.fit(X_train,y_train)\n",
    "\n",
    "predictions = nb.predict(X_test)\n",
    "print(confusion_matrix(y_test,predictions))\n",
    "print('\\n')\n",
    "print(classification_report(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ba1b1e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "#nb performance\n",
    "#%pylab inline \n",
    "#pylab.rcParams['figure.figsize'] = (15,6)\n",
    "##plt.plot(predictions[:20],label = 'Predicted')\n",
    "#plt.plot(y_test.values[:20], label = 'Actual')\n",
    "#plt.scatter(predictions[:], y_test.values[:])\n",
    "#plt.legend()\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "94265537",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x201b331c8b0>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#nb bar chart of predicted and actual\n",
    "#results['results'] = df(y_test['stars'])\n",
    "results = y_test.filter(['stars'], axis=1)\n",
    "results['predicted'] = predictions.tolist()\n",
    "g = sns.FacetGrid(data=results, col='stars')\n",
    "g.map(plt.hist, 'predicted', bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "53f4fbea",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mcdc9\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         1.0       0.79      0.76      0.77       556\n",
      "         2.0       0.21      0.29      0.24       119\n",
      "         4.0       0.35      0.43      0.38       296\n",
      "         5.0       0.88      0.83      0.85      1466\n",
      "\n",
      "    accuracy                           0.74      2437\n",
      "   macro avg       0.56      0.57      0.56      2437\n",
      "weighted avg       0.76      0.74      0.75      2437\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\mcdc9\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#linear regression model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n",
    "lr.fit(X_train,y_train)\n",
    "predictions = lr.predict(X_test)\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "new = np.asarray(y_test)\n",
    "confusion_matrix(predictions,y_test)\n",
    "print(classification_report(predictions,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bcd33803",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#linear regression performance\n",
    "%pylab inline \n",
    "pylab.rcParams['figure.figsize'] = (15,6)\n",
    "plt.plot(predictions[:20],label = 'Predicted')\n",
    "plt.plot(y_test.values[:20], label = 'Actual')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a193cd5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x201b38a8280>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#linear regression bar chart of predicted and actual\n",
    "results = y_test\n",
    "results['predicted'] = predictions.tolist()\n",
    "g = sns.FacetGrid(data=results, col='stars')\n",
    "g.map(plt.hist, 'predicted', bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c9d170cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2        {'neg': 0.062, 'neu': 0.592, 'pos': 0.346, 'co...\n",
       "4        {'neg': 0.0, 'neu': 0.852, 'pos': 0.148, 'comp...\n",
       "7        {'neg': 0.0, 'neu': 0.314, 'pos': 0.686, 'comp...\n",
       "8        {'neg': 0.014, 'neu': 0.959, 'pos': 0.027, 'co...\n",
       "12       {'neg': 0.051, 'neu': 0.463, 'pos': 0.486, 'co...\n",
       "                               ...                        \n",
       "26315    {'neg': 0.138, 'neu': 0.64, 'pos': 0.222, 'com...\n",
       "26320    {'neg': 0.117, 'neu': 0.415, 'pos': 0.468, 'co...\n",
       "26322    {'neg': 0.07, 'neu': 0.453, 'pos': 0.477, 'com...\n",
       "26323    {'neg': 0.0, 'neu': 0.512, 'pos': 0.488, 'comp...\n",
       "26327    {'neg': 0.025, 'neu': 0.704, 'pos': 0.272, 'co...\n",
       "Name: stemmed, Length: 8121, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "# Instantiate\n",
    "sid = SentimentIntensityAnalyzer()\n",
    "# Generate sentiment scores\n",
    "sentiment_scores = X['stemmed'].apply(sid.polarity_scores)\n",
    "sentiment = sentiment_scores.apply(lambda x: x['compound']) # Get compound score\n",
    "sentiment_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d92d63a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#type(sentiment_scores)\n",
    "#sentiment_scores.values[1]\n",
    "#df = X['stemmed']\n",
    "#results['neu'] = predictions.tolist()\n",
    "#df['reviews'] = yelp_reviews_FL['stars']\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
